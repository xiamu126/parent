<?xml version="1.0" encoding="UTF-8"?>
<!--scan：当此属性设置为true时，配置文件如果发生改变，将会被重新加载，默认值为true。
scanPeriod：设置监测配置文件是否有修改的时间间隔，如果没有给出时间单位，默认单位是毫秒当scan为true时，此属性生效。默认的时间间隔为1分钟。
debug：当此属性设置为true时，将打印出logback内部日志信息，实时查看logback运行状态。默认值为false。-->
<configuration scan="true" scanPeriod="60 seconds" debug="false">
    <property name="LOG_HOME" value="./logs"/>
    <property name="appName" value="znld-web"/>
    <property name="maxHistory" value="365" />
    <property name="maxFileSize" value="100MB" />
    <property name="pattern1"
              value="%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] [IP:%X{req.remoteHost} url:%X{req.requestURI} Method:%X{req.method} QueryString:%X{req.queryString} device:%X{req.userAgent} ipx:%X{req.xForwardedFor}] %-5level[%logger{80}:%line]-%msg%n"/>
    <property name="pattern"
              value="%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %highlight(%-5level)[%logger{80}:%line]-%msg%n"/>
    <appender name="stdout" class="ch.qos.logback.core.ConsoleAppender">
        <!--日志输出格式：%d表示日期时间，%thread表示线程名，%-5level：级别从左显示5个字符宽度%logger{50} 表示logger名字最长50个字符，否则按照句点分割。%msg：日志消息，%n是换行符-->
        <encoder>
            <pattern>${pattern}</pattern>
        </encoder>
    </appender>

    <appender name="appLogAppender" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <file>${LOG_HOME}/${appName}.log</file>
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>ERROR</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>
        <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
            <fileNamePattern>${LOG_HOME}/${appName}-%d{yyyy-MM-dd}-%i.log</fileNamePattern>
            <MaxHistory>${maxHistory}</MaxHistory>
            <maxFileSize>${maxFileSize}</maxFileSize>
            <totalSizeCap>20GB</totalSizeCap>
        </rollingPolicy>
        <encoder>
            <pattern>${pattern}</pattern>
        </encoder>
    </appender>

    <!--name：表示匹配的logger类型前缀，也就是包的前半部分
		level：要记录的日志级别，包括 TRACE < DEBUG < INFO < WARN < ERROR
		additivity：作用在于children-logger是否使用rootLogger配置的appender进行输出，false：表示只用当前logger的appender-ref，true：表示当前logger的appender-ref和rootLogger的appender-ref都有效-->
    <logger name="org.springframework" level="error"/>
    <logger name="org.mybatis" level="error"/>
    <logger name="org.apache" level="error"/>
    <logger name="io.netty" level="error"/>
    <logger name="org.redisson" level="error"/>
    <logger name="com.alibaba" level="error"/>
    <logger name="com.baomidou" level="error"/>
    <logger name="org.hibernate" level="error"/>
    <logger name="druid" level="error"/>
    <logger name="io.lettuce" level="error"/>
    <logger name="reactor" level="error"/>
    <logger name="org.thymeleaf" level="error"/>
    <logger name="io.swagger" level="error" />
    <logger name="springfox" level="error"/>

    <logger name="com.sybd.znld" level="debug"/> <!--没有设置addtivity，默认为true，将此logger的打印信息向上级传递,即传给root；-->
    <logger name="com.sybd.znld.video.service" level="debug"/>
    <logger name="com.sybd.znld.onenet" level="error"/>
    <root level="debug">
        <appender-ref ref="stdout"/>
        <appender-ref ref="appLogAppender"/>
    </root>
</configuration>